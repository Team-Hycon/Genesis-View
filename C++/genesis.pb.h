// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genesis.proto

#ifndef PROTOBUF_genesis_2eproto_INCLUDED
#define PROTOBUF_genesis_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_genesis_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBlockImpl();
void InitDefaultsBlock();
void InitDefaultsBlockHeaderImpl();
void InitDefaultsBlockHeader();
void InitDefaultsTxImpl();
void InitDefaultsTx();
inline void InitDefaults() {
  InitDefaultsBlock();
  InitDefaultsBlockHeader();
  InitDefaultsTx();
}
}  // namespace protobuf_genesis_2eproto
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class Tx;
class TxDefaultTypeInternal;
extern TxDefaultTypeInternal _Tx_default_instance_;
namespace google {
namespace protobuf {
template<> ::Block* Arena::Create< ::Block>(Arena*);
template<> ::BlockHeader* Arena::Create< ::BlockHeader>(Arena*);
template<> ::Tx* Arena::Create< ::Tx>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Tx txs = 3;
  int txs_size() const;
  void clear_txs();
  static const int kTxsFieldNumber = 3;
  ::Tx* mutable_txs(int index);
  ::google::protobuf::RepeatedPtrField< ::Tx >*
      mutable_txs();
  const ::Tx& txs(int index) const;
  ::Tx* add_txs();
  const ::google::protobuf::RepeatedPtrField< ::Tx >&
      txs() const;

  // .BlockHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::BlockHeader& header() const;
  ::BlockHeader* release_header();
  ::BlockHeader* mutable_header();
  void set_allocated_header(::BlockHeader* header);

  // @@protoc_insertion_point(class_scope:Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Tx > txs_;
  ::BlockHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_genesis_2eproto::TableStruct;
  friend void ::protobuf_genesis_2eproto::InitDefaultsBlockImpl();
};
// -------------------------------------------------------------------

class BlockHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BlockHeader* other);
  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BlockHeader>(NULL);
  }

  BlockHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BlockHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlockHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes merkleRoot = 2;
  void clear_merkleroot();
  static const int kMerkleRootFieldNumber = 2;
  const ::std::string& merkleroot() const;
  void set_merkleroot(const ::std::string& value);
  #if LANG_CXX11
  void set_merkleroot(::std::string&& value);
  #endif
  void set_merkleroot(const char* value);
  void set_merkleroot(const void* value, size_t size);
  ::std::string* mutable_merkleroot();
  ::std::string* release_merkleroot();
  void set_allocated_merkleroot(::std::string* merkleroot);

  // bytes stateRoot = 3;
  void clear_stateroot();
  static const int kStateRootFieldNumber = 3;
  const ::std::string& stateroot() const;
  void set_stateroot(const ::std::string& value);
  #if LANG_CXX11
  void set_stateroot(::std::string&& value);
  #endif
  void set_stateroot(const char* value);
  void set_stateroot(const void* value, size_t size);
  ::std::string* mutable_stateroot();
  ::std::string* release_stateroot();
  void set_allocated_stateroot(::std::string* stateroot);

  // int64 timeStamp = 5;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int32 difficulty = 4;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 4;
  ::google::protobuf::int32 difficulty() const;
  void set_difficulty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BlockHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr merkleroot_;
  ::google::protobuf::internal::ArenaStringPtr stateroot_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 difficulty_;
  mutable int _cached_size_;
  friend struct ::protobuf_genesis_2eproto::TableStruct;
  friend void ::protobuf_genesis_2eproto::InitDefaultsBlockHeaderImpl();
};
// -------------------------------------------------------------------

class Tx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Tx) */ {
 public:
  Tx();
  virtual ~Tx();

  Tx(const Tx& from);

  inline Tx& operator=(const Tx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tx(Tx&& from) noexcept
    : Tx() {
    *this = ::std::move(from);
  }

  inline Tx& operator=(Tx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tx* internal_default_instance() {
    return reinterpret_cast<const Tx*>(
               &_Tx_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Tx* other);
  friend void swap(Tx& a, Tx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tx* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Tx>(NULL);
  }

  Tx* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Tx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tx& from);
  void MergeFrom(const Tx& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // bytes to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // bytes signature = 6;
  void clear_signature();
  static const int kSignatureFieldNumber = 6;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // int64 amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::int64 amount() const;
  void set_amount(::google::protobuf::int64 value);

  // int64 fee = 4;
  void clear_fee();
  static const int kFeeFieldNumber = 4;
  ::google::protobuf::int64 fee() const;
  void set_fee(::google::protobuf::int64 value);

  // int32 nonce = 5;
  void clear_nonce();
  static const int kNonceFieldNumber = 5;
  ::google::protobuf::int32 nonce() const;
  void set_nonce(::google::protobuf::int32 value);

  // bool recovery = 7;
  void clear_recovery();
  static const int kRecoveryFieldNumber = 7;
  bool recovery() const;
  void set_recovery(bool value);

  // @@protoc_insertion_point(class_scope:Tx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::int64 fee_;
  ::google::protobuf::int32 nonce_;
  bool recovery_;
  mutable int _cached_size_;
  friend struct ::protobuf_genesis_2eproto::TableStruct;
  friend void ::protobuf_genesis_2eproto::InitDefaultsTxImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// .BlockHeader header = 1;
inline bool Block::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Block::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::BlockHeader& Block::header() const {
  const ::BlockHeader* p = header_;
  // @@protoc_insertion_point(field_get:Block.header)
  return p != NULL ? *p : *reinterpret_cast<const ::BlockHeader*>(
      &::_BlockHeader_default_instance_);
}
inline ::BlockHeader* Block::release_header() {
  // @@protoc_insertion_point(field_release:Block.header)
  
  ::BlockHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::BlockHeader* Block::mutable_header() {
  
  if (header_ == NULL) {
    header_ = ::google::protobuf::Arena::Create< ::BlockHeader >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:Block.header)
  return header_;
}
inline void Block::set_allocated_header(::BlockHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Block.header)
}

// repeated .Tx txs = 3;
inline int Block::txs_size() const {
  return txs_.size();
}
inline void Block::clear_txs() {
  txs_.Clear();
}
inline ::Tx* Block::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:Block.txs)
  return txs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Tx >*
Block::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:Block.txs)
  return &txs_;
}
inline const ::Tx& Block::txs(int index) const {
  // @@protoc_insertion_point(field_get:Block.txs)
  return txs_.Get(index);
}
inline ::Tx* Block::add_txs() {
  // @@protoc_insertion_point(field_add:Block.txs)
  return txs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Tx >&
Block::txs() const {
  // @@protoc_insertion_point(field_list:Block.txs)
  return txs_;
}

// -------------------------------------------------------------------

// BlockHeader

// bytes merkleRoot = 2;
inline void BlockHeader::clear_merkleroot() {
  merkleroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::merkleroot() const {
  // @@protoc_insertion_point(field_get:BlockHeader.merkleRoot)
  return merkleroot_.GetNoArena();
}
inline void BlockHeader::set_merkleroot(const ::std::string& value) {
  
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BlockHeader.merkleRoot)
}
#if LANG_CXX11
inline void BlockHeader::set_merkleroot(::std::string&& value) {
  
  merkleroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockHeader.merkleRoot)
}
#endif
inline void BlockHeader::set_merkleroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockHeader.merkleRoot)
}
inline void BlockHeader::set_merkleroot(const void* value, size_t size) {
  
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockHeader.merkleRoot)
}
inline ::std::string* BlockHeader::mutable_merkleroot() {
  
  // @@protoc_insertion_point(field_mutable:BlockHeader.merkleRoot)
  return merkleroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_merkleroot() {
  // @@protoc_insertion_point(field_release:BlockHeader.merkleRoot)
  
  return merkleroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_merkleroot(::std::string* merkleroot) {
  if (merkleroot != NULL) {
    
  } else {
    
  }
  merkleroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkleroot);
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.merkleRoot)
}

// bytes stateRoot = 3;
inline void BlockHeader::clear_stateroot() {
  stateroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::stateroot() const {
  // @@protoc_insertion_point(field_get:BlockHeader.stateRoot)
  return stateroot_.GetNoArena();
}
inline void BlockHeader::set_stateroot(const ::std::string& value) {
  
  stateroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BlockHeader.stateRoot)
}
#if LANG_CXX11
inline void BlockHeader::set_stateroot(::std::string&& value) {
  
  stateroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BlockHeader.stateRoot)
}
#endif
inline void BlockHeader::set_stateroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stateroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BlockHeader.stateRoot)
}
inline void BlockHeader::set_stateroot(const void* value, size_t size) {
  
  stateroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BlockHeader.stateRoot)
}
inline ::std::string* BlockHeader::mutable_stateroot() {
  
  // @@protoc_insertion_point(field_mutable:BlockHeader.stateRoot)
  return stateroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_stateroot() {
  // @@protoc_insertion_point(field_release:BlockHeader.stateRoot)
  
  return stateroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_stateroot(::std::string* stateroot) {
  if (stateroot != NULL) {
    
  } else {
    
  }
  stateroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stateroot);
  // @@protoc_insertion_point(field_set_allocated:BlockHeader.stateRoot)
}

// int32 difficulty = 4;
inline void BlockHeader::clear_difficulty() {
  difficulty_ = 0;
}
inline ::google::protobuf::int32 BlockHeader::difficulty() const {
  // @@protoc_insertion_point(field_get:BlockHeader.difficulty)
  return difficulty_;
}
inline void BlockHeader::set_difficulty(::google::protobuf::int32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:BlockHeader.difficulty)
}

// int64 timeStamp = 5;
inline void BlockHeader::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:BlockHeader.timeStamp)
  return timestamp_;
}
inline void BlockHeader::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:BlockHeader.timeStamp)
}

// -------------------------------------------------------------------

// Tx

// bytes from = 1;
inline void Tx::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::from() const {
  // @@protoc_insertion_point(field_get:Tx.from)
  return from_.GetNoArena();
}
inline void Tx::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tx.from)
}
#if LANG_CXX11
inline void Tx::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tx.from)
}
#endif
inline void Tx::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tx.from)
}
inline void Tx::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tx.from)
}
inline ::std::string* Tx::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:Tx.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_from() {
  // @@protoc_insertion_point(field_release:Tx.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Tx.from)
}

// bytes to = 2;
inline void Tx::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::to() const {
  // @@protoc_insertion_point(field_get:Tx.to)
  return to_.GetNoArena();
}
inline void Tx::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tx.to)
}
#if LANG_CXX11
inline void Tx::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tx.to)
}
#endif
inline void Tx::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tx.to)
}
inline void Tx::set_to(const void* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tx.to)
}
inline ::std::string* Tx::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:Tx.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_to() {
  // @@protoc_insertion_point(field_release:Tx.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:Tx.to)
}

// int64 amount = 3;
inline void Tx::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Tx::amount() const {
  // @@protoc_insertion_point(field_get:Tx.amount)
  return amount_;
}
inline void Tx::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:Tx.amount)
}

// int64 fee = 4;
inline void Tx::clear_fee() {
  fee_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Tx::fee() const {
  // @@protoc_insertion_point(field_get:Tx.fee)
  return fee_;
}
inline void Tx::set_fee(::google::protobuf::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:Tx.fee)
}

// int32 nonce = 5;
inline void Tx::clear_nonce() {
  nonce_ = 0;
}
inline ::google::protobuf::int32 Tx::nonce() const {
  // @@protoc_insertion_point(field_get:Tx.nonce)
  return nonce_;
}
inline void Tx::set_nonce(::google::protobuf::int32 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:Tx.nonce)
}

// bytes signature = 6;
inline void Tx::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tx::signature() const {
  // @@protoc_insertion_point(field_get:Tx.signature)
  return signature_.GetNoArena();
}
inline void Tx::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tx.signature)
}
#if LANG_CXX11
inline void Tx::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Tx.signature)
}
#endif
inline void Tx::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tx.signature)
}
inline void Tx::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tx.signature)
}
inline ::std::string* Tx::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Tx.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tx::release_signature() {
  // @@protoc_insertion_point(field_release:Tx.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tx::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Tx.signature)
}

// bool recovery = 7;
inline void Tx::clear_recovery() {
  recovery_ = false;
}
inline bool Tx::recovery() const {
  // @@protoc_insertion_point(field_get:Tx.recovery)
  return recovery_;
}
inline void Tx::set_recovery(bool value) {
  
  recovery_ = value;
  // @@protoc_insertion_point(field_set:Tx.recovery)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_genesis_2eproto_INCLUDED
